// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: time.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeServerClient is the client API for TimeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServerClient interface {
	GetRawTime(ctx context.Context, in *GetRawTimeReq, opts ...grpc.CallOption) (*GetRawTimeResp, error)
	GetFmtTime(ctx context.Context, in *GetFmtTimeReq, opts ...grpc.CallOption) (*GetFmtTimeResp, error)
	GetFmtTimeFromRaw(ctx context.Context, in *GetFmtTimeFromRawReq, opts ...grpc.CallOption) (*GetFmtTimeFromRawResp, error)
}

type timeServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServerClient(cc grpc.ClientConnInterface) TimeServerClient {
	return &timeServerClient{cc}
}

func (c *timeServerClient) GetRawTime(ctx context.Context, in *GetRawTimeReq, opts ...grpc.CallOption) (*GetRawTimeResp, error) {
	out := new(GetRawTimeResp)
	err := c.cc.Invoke(ctx, "/time_service.TimeServer/GetRawTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServerClient) GetFmtTime(ctx context.Context, in *GetFmtTimeReq, opts ...grpc.CallOption) (*GetFmtTimeResp, error) {
	out := new(GetFmtTimeResp)
	err := c.cc.Invoke(ctx, "/time_service.TimeServer/GetFmtTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeServerClient) GetFmtTimeFromRaw(ctx context.Context, in *GetFmtTimeFromRawReq, opts ...grpc.CallOption) (*GetFmtTimeFromRawResp, error) {
	out := new(GetFmtTimeFromRawResp)
	err := c.cc.Invoke(ctx, "/time_service.TimeServer/GetFmtTimeFromRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServerServer is the server API for TimeServer service.
// All implementations must embed UnimplementedTimeServerServer
// for forward compatibility
type TimeServerServer interface {
	GetRawTime(context.Context, *GetRawTimeReq) (*GetRawTimeResp, error)
	GetFmtTime(context.Context, *GetFmtTimeReq) (*GetFmtTimeResp, error)
	GetFmtTimeFromRaw(context.Context, *GetFmtTimeFromRawReq) (*GetFmtTimeFromRawResp, error)
	mustEmbedUnimplementedTimeServerServer()
}

// UnimplementedTimeServerServer must be embedded to have forward compatible implementations.
type UnimplementedTimeServerServer struct {
}

func (UnimplementedTimeServerServer) GetRawTime(context.Context, *GetRawTimeReq) (*GetRawTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTime not implemented")
}
func (UnimplementedTimeServerServer) GetFmtTime(context.Context, *GetFmtTimeReq) (*GetFmtTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFmtTime not implemented")
}
func (UnimplementedTimeServerServer) GetFmtTimeFromRaw(context.Context, *GetFmtTimeFromRawReq) (*GetFmtTimeFromRawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFmtTimeFromRaw not implemented")
}
func (UnimplementedTimeServerServer) mustEmbedUnimplementedTimeServerServer() {}

// UnsafeTimeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServerServer will
// result in compilation errors.
type UnsafeTimeServerServer interface {
	mustEmbedUnimplementedTimeServerServer()
}

func RegisterTimeServerServer(s grpc.ServiceRegistrar, srv TimeServerServer) {
	s.RegisterService(&TimeServer_ServiceDesc, srv)
}

func _TimeServer_GetRawTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).GetRawTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_service.TimeServer/GetRawTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).GetRawTime(ctx, req.(*GetRawTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeServer_GetFmtTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFmtTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).GetFmtTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_service.TimeServer/GetFmtTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).GetFmtTime(ctx, req.(*GetFmtTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeServer_GetFmtTimeFromRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFmtTimeFromRawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).GetFmtTimeFromRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_service.TimeServer/GetFmtTimeFromRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).GetFmtTimeFromRaw(ctx, req.(*GetFmtTimeFromRawReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeServer_ServiceDesc is the grpc.ServiceDesc for TimeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_service.TimeServer",
	HandlerType: (*TimeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRawTime",
			Handler:    _TimeServer_GetRawTime_Handler,
		},
		{
			MethodName: "GetFmtTime",
			Handler:    _TimeServer_GetFmtTime_Handler,
		},
		{
			MethodName: "GetFmtTimeFromRaw",
			Handler:    _TimeServer_GetFmtTimeFromRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time.proto",
}
